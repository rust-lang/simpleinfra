#!/usr/bin/env python3

import os
import subprocess
import pathlib
import shutil
import argparse
import sys
sys.path.append("../ansible")
import ansible

# Utility for removing everything in a directory except one thing
def remove_all_except_one(directory, exception):
    for item in os.listdir(directory):
        if item != exception:
            item_path = os.path.join(directory, item)
            if os.path.islink(item_path) or os.path.isfile(item_path):
                # Delete the file or symlink
                os.remove(item_path)
            else:
                # Delete the directory
                shutil.rmtree(item_path)

# Create the workspace directory leaving virtual environment 
# if it's already there
def create_workspace_dir():
    dir = pathlib.Path(__file__).resolve().parent
    workspace = os.path.join(dir, '.workspace')
    if os.path.exists(workspace):
        # Clean up workspace except for virtual environment
        remove_all_except_one(workspace, ".venv")
    else: 
        # Make workspace
        os.mkdir(workspace)
    return pathlib.Path(workspace)

# Create the workspace environment
def create_workspace(env, playbook):
    workspace = create_workspace_dir()
    ansible.install_ansible(workspace / ".venv")
    ansible.create_workspace(workspace, env, playbook)

    # Link the template into the workspace
    template_path = pathlib.Path(playbook).resolve()
    if not os.path.exists(template_path):
        raise Exception(f"Last argument to packer call was the file '{template_path}' which does not exist")
    (workspace / "template").symlink_to(template_path)
    return workspace

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("env")
    parser.add_argument("playbook")
    parser.add_argument('--var', action='append', help='Ansible variables as $key=$value', default=[])
    args = parser.parse_args()

    workspace = create_workspace(args.env, args.playbook)
    # Call packer with the right arguments from the workspace
    vars = []
    for var in args.var:
        vars += ["-var", var]
    cmd = ["packer", "build", *vars, "template"]
    res = subprocess.run(cmd, cwd=str(workspace))
    if res.returncode != 0:
        exit(1)
